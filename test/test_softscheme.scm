(define countfail 0)

(define assertEqual
    (lambda (a b)
        (if (= a b) 
            (display ".") 
            (begin (display "F") (set! countfail (+ countfail 1))))))
(define assertAlmost
    (lambda (a b error)
        (if (* (< (- a b) error) (< (- b a) error))
            (display ".") 
            (begin (display "F") (set! countfail (+ countfail 1))))))
(define assertGreater
    (lambda (a b)
        (if (> a b) 
            (display ".") 
            (begin (display "F") (set! countfail (+ countfail 1))))))
(define assertLess
    (lambda (a b)
        (if (< a b) 
            (display ".") 
            (begin (display "F") (set! countfail (+ countfail 1))))))
             
(assertEqual 0 -0.0)
(assertEqual 24691.3578  (+ 12345.6789 12345.6789))
(assertEqual -86419.7532 (- 12345.6789 98765.4321))
(assertEqual 56.133      (* 5.67 9.9))
(assertEqual 3.85625     (/ 24.68 6.4))
(assertEqual (digit1 300) (digit1  0.003))
(assertEqual (float   -3) (float  -3.000))
(assertEqual (int     -3) (int    -3.876))
(assertEqual 12          (sqrt 144))
(assertEqual 0           (ln 1))
(assertEqual 1           (exp 0))
(assertAlmost (ln 12)  (+ (ln 3)(ln 4))   0.0000000001)
(assertAlmost (exp 7)  (* (exp 3)(exp 4)) 0.0000000001)
(rand_seed 1)
(assertGreater 1 (rand))
(assertLess    0 (rand))
(print "")

(assertEqual 3 (if 1 3 2))
(assertEqual 3 (if 0 3 2))
(assertEqual 2 (if (< 1 0) 3 2))
(assertEqual 2 (if (> 0 1) 3 2))
(assertEqual 1024 ((lambda x (* x  x)) 32))
(assertEqual 4 (begin 1 2 3 4))
(assertEqual 1 (car (list 1 2 3 4)))
(assertEqual (list 2 3 4) (cdr (list 1 2 3 4)))
(define a 7)
(assertEqual 7 a)
(set!   a 5)
(assertEqual 5 a)
(assertEqual (list 1 2 3) (append (list 1 2) (list 3)))
(assertEqual (length (list 1 2 3 4)) (digit1 4))
(assertEqual (> 1 0) (null? (list)))
(assertEqual (> 1 0) (list? (list 1 2 3 4)))

(assertEqual (+ 1 2) (+ (int 1 ) (int 2)) )
(assertEqual (+ 1 2) (+ 1 (int 2) ) )
(assertEqual (+ 1 2) (+ (int 1 ) 2) )
(assertEqual (- 1 2) (- (int 1 ) (int 2)) )
(assertEqual (- 1 2) (- 1 (int 2) ) )
(assertEqual (- 1 2) (- (int 1 ) 2) )
(assertEqual (* 1 2) (* (int 1 ) (int 2)) )
(assertEqual (* 1 2) (* 1 (int 2) ) )
(assertEqual (* 1 2) (* (int 1 ) 2) )
(assertEqual (/ 1 2) (/ (int 1 ) (int 2)) )
(assertEqual (/ 1 2) (/ 1 (int 2) ) )
(assertEqual (/ 1 2) (/ (int 1 ) 2) )
(assertEqual (exp  2) (exp  (int 2) ))
(assertEqual (ln   2) (ln   (int 2) ))
(assertEqual (sqrt 2) (sqrt (int 2) ))

(define b 8)
(define f 
    (lambda (n)
        (* n n)))
(python)
b = fetch_scheme("b")
f = fetch_scheme("f")
assert(b==8)
assert(f(3)==9)
c=5
def g(n):
    return n*4
load_to_scheme(c, "c")
load_to_scheme(g, "g")
scheme()

(assertEqual c (int 5))
(assertEqual (g 3) 12)

(source_scheme "test/dummy.scm")
(source_python "test/dummy.py")
(assertEqual (f0 3) 9)
(assertEqual  a0 3)

(source_scheme "lib/rand_norm.scm")
(source_scheme "lib/rand_gamma.scm")
(source_scheme "lib/rand_student.scm")


(print   "")
(print   "------------------------------------------------------------")
(if (= countfail 0) 
    (print "All_tests_passed.")
    (begin (display (int countfail))(print "_tests_failed.")))
(print   "Goodness_of_random_numbers_should_be_tested_at_lib/kstest.scm")
(print   "")
(print   "OK")

(list "comments:")
(list print "FIXMEnote:_Strings_are_used_like_this..")

